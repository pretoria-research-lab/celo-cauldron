image: docker:latest

stages:
  - test
  - build
  - deploy-dev
  
test:
  stage: test
  image: alpine
  script:
      # Install alpine-sdk
      - apk add --update alpine-sdk
  
      # Install py-pip for some yarn dependencies
      - apk add --update py-pip 
      - pip install -U pip

      # Install node/npm/yarn and build
      - apk add --update nodejs nodejs-npm
      - apk add --update yarn
      - cd app 
      - yarn
      
      - echo "FILES"
      - ls
      
      # Create test
      - echo "TEST START"
      - yarn test
      - echo "TEST COMPLETE" 
  artifacts:
    paths:
      - app/node_modules/
    expire_in: 60 mins

build:
  stage: build
  image: alpine
  dependencies:
    - test
  script:
      # Install node/npm and build
      - apk add --update nodejs nodejs-npm

      # create-react-app option can help with OOM issues on build
      - export GENERATE_SOURCEMAP=false
      
      # Create build
      - cd app
      - echo "BUILD START"
      - yarn build
      - echo "BUILD COMPLETE"
  artifacts:
    paths:
      - app/build/
    expire_in: 60 mins
  only:
    - master
    - develop

deploy-dev:
  stage: deploy-dev
  image: python:3.7-alpine
  dependencies:
    - build
  script:
    # Configure environment variables injected by GitLab
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID       
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY

    # Install awscli
    - export PATH=~/.local/bin:$PATH    
    - pip install awscli --upgrade --user    

    # Install and configure 
    # Using injected environment variables for AWS IAM setup
    - npm install -g serverless
    - serverless config credentials --provider aws --key $AWS_ACCESS_KEY_ID --secret $AWS_ACCESS_KEY_SECRET --profile default
    
    # Sync build/ to s3 bucket
    - serverless syncToS3
    - serverless invalidatCloudFrontCache

    - echo "DEPLOYMENT COMPLETE"
  environment:
    name: dev