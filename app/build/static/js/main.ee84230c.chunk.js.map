{"version":3,"sources":["loading.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_CONFIG","baseUrl","basePath","timeout","headers","instance","axios","create","baseURL","App","props","getClaimUrls","a","get","response","console","log","JSON","stringify","data","rewards","reloadClaimUrls","setState","loading","claimUrls","currentUrl","state","length","currentUrlIndex","componentDidMount","setInterval","reloadTimer","render","className","id","alt","src","loadingImg","claimUrl","size","bgColor","fgColor","includeMargin","value","rewardInXDAI","createdTimestamp","hashCode","substring","onClick","event","preventDefault","addToTimer","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee84230c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.1d66decc.svg\";","import React, {Component} from 'react';\nimport './App.css';\nimport QRCode from 'qrcode.react';\nimport loadingImg from './loading.svg';\nimport axios from 'axios';\n\nconst API_CONFIG = {\n  baseUrl : \"https://xsxgj1rqnc.execute-api.eu-central-1.amazonaws.com\",\n  basePath : \"/dev/reward\",\n  timeout: 6000,\n  headers: {\"Content-Type\":\"application/json;charset=utf-8\"}\n}\n\nconst instance = axios.create({\n  baseURL: API_CONFIG.baseUrl,\n  timeout: API_CONFIG.timeout,\n  headers: API_CONFIG.headers\n});\n\nexport default class App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state =  {   claimUrls: [],\n                      currentUrl: \"\",\n                      currentUrlIndex: 0,\n                      loading: true,\n                      reloadTimer: 30\n                  };\n  }\n\n  getClaimUrls = async () => {\n      const response = await instance.get(API_CONFIG.basePath); // no authorization on this endpoint\n      console.log(\"Reward API - getAll() - success, response : \" + JSON.stringify(response));\n      return response.data.rewards;    \n  }\n\n  reloadClaimUrls = async () => {\n    this.setState({loading:true}, async () => {\n      const claimUrls = await this.getClaimUrls();\n      this.setState({claimUrls}, () => {\n        this.setState({currentUrl: this.state.claimUrls[this.state.claimUrls.length - 1]}, () => {\n          const currentUrlIndex = this.state.claimUrls.length;\n          this.setState({currentUrlIndex}, () => {\n            this.setState({loading:false});\n          });          \n        });        \n      });\n    });\n  }\n\n  componentDidMount = () =>{    \n    this.reloadClaimUrls();\n    setInterval(()=>{\n      const reloadTimer =this.state.reloadTimer - 1;\n      this.setState({reloadTimer}, async () => {\n        if(reloadTimer===0){\n          await this.reloadClaimUrls();\n          this.setState({reloadTimer:10});\n        }\n      });      \n    }, 1000);\n  }\n\n  render = () => {\n    return (\n      <div className=\"App\">\n        <header className=\"Next Big Thing\">          \n          <h1>xDAIRow</h1>\n          <hr/>\n        </header>\n        <div id=\"main\" className=\"container\">        \n          <div className=\"row\">            \n            <div className=\"column col-sm-12\">                \n                { this.state.loading ? \n                  <>\n                    <h2>Loading...</h2>\n                    <div>\n                      <img alt=\"loading\" className=\"loadingImg\" src={loadingImg} /> \n                    </div>\n                  </>\n                  :\n                  <>                    \n                    <p>Scan this URL and go straight to a browser burner wallet for use in our vending machine!</p>\n                    \n                    <div className='qrCode'>\n                      {this.state.currentUrl.claimUrl ? <QRCode size={256} bgColor=\"#000000\" fgColor=\"#00FF33\" includeMargin={true} value={this.state.currentUrl.claimUrl} />\n                      : <h3>:(</h3>}\n                    </div>\n\n                    <p><strong>You received {this.state.currentUrl.rewardInXDAI} xDAI</strong></p>\n                    <p>{\"Attempt : \" + this.state.currentUrlIndex}</p>\n                    <p>{\"Timestamp : \" + this.state.currentUrl.createdTimestamp}</p>\n                    <p>{\"Hash (truncated) : \" + this.state.currentUrl.hashCode.substring(0,12)}</p>\n                    <p>Refreshing in {this.state.reloadTimer} seconds...</p>\n                    \n                    <button className=\"btn-primary\" onClick={(event)=>{\n                      event.preventDefault();\n                      if(this.state.currentUrlIndex!==0){\n                        const currentUrlIndex = this.state.currentUrlIndex -1;\n                        const currentUrl = this.state.claimUrls[currentUrlIndex];\n                        this.setState({currentUrl},()=>this.setState({currentUrlIndex}));  \n                      }\n                    }}>Show previous...</button>\n                    \n                    <button className=\"btn-primary\" onClick={(event)=>{\n                      event.preventDefault(); \n                      const addToTimer = this.state.reloadTimer + 10; \n                      this.setState({reloadTimer:addToTimer});\n                    }}>Wait!</button>\n                  </>\n                }              \n            </div>\n          </div> {/* row */}\n        </div> {/* main- */}\n      </div> \n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}